<?php
/*
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ZeroTierCentralAPILib\Tests;

use ZeroTierCentralAPILib\APIException;
use ZeroTierCentralAPILib\Exceptions;
use ZeroTierCentralAPILib\APIHelper;
use ZeroTierCentralAPILib\Models;

class NetworkControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \ZeroTierCentralAPILib\Controllers\NetworkController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \ZeroTierCentralAPILib\ZeroTierCentralAPIClient();
        self::$controller = $client->getNetwork();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Testcase for testing endpoint Retrieve a Network
     */
    public function testRetrieveANetwork11()
    {
        // Parameters for the API call
        $networkId = '0000000000000000';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->retrieveANetwork($networkId);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "id": "",  "type": "",  "clock": 0,  "ui": {},  "rulesSource": "",  "description": "",  "permissi' .
                'ons": {    "{id}": {      "r": false,      "m": false,      "d": false,      "a": false,      "o": f' .
                'alse,      "t": ""    }  },  "onlineMemberCount": 0,  "capabilitiesByName": {},  "tagsByName": {},  ' .
                '"circuitTestEvery": 0,  "config": {    "id": "",    "nwid": "",    "name": "",    "objtype": "",    ' .
                '"private": false,    "creationTime": 0,    "revision": 0,    "lastModified": 0,    "multicastLimit":' .
                ' 0,    "routes": [],    "rules": [],    "tags": [],    "capabilities": [],    "totalMemberCount": 0,' .
                '    "activeMemberCount": 0,    "authTokens": [],    "authorizedMemberCount": 0,    "v4AssignMode": {' .
                '},    "v6AssignMode": {}  }}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Only fields marked as [rw] can be directly modified. If other fields are present in the posted request they are ignored.
New networks can be created by POSTing to `/api/network` with no networkId parameter. The server will create a random unused network ID and return the new network record.
     */
    public function testUpdateOrCreateANetwork11()
    {
        // Parameters for the API call
        $input = array();
        $input['networkId'] = '0000000000000000';
        $input['body'] = APIHelper::deserialize(
            '{  "id": "",  "type": "",  "clock": 0,  "ui": {},  "rulesSource": "",  "description": "",  "permissi' .
            'ons": {    "{id}": {      "r": false,      "m": false,      "d": false,      "a": false,      "o": f' .
            'alse,      "t": ""    }  },  "onlineMemberCount": 0,  "capabilitiesByName": {},  "tagsByName": {},  ' .
            '"circuitTestEvery": 0,  "config": {    "id": "",    "nwid": "",    "name": "",    "objtype": "",    ' .
            '"private": false,    "creationTime": 0,    "revision": 0,    "lastModified": 0,    "multicastLimit":' .
            ' 0,    "routes": [],    "rules": [],    "tags": [],    "capabilities": [],    "totalMemberCount": 0,' .
            '    "activeMemberCount": 0,    "authTokens": [],    "authorizedMemberCount": 0,    "v4AssignMode": {' .
            '},    "v6AssignMode": {}  }}',
            new Models\Network()
        );

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->updateOrCreateANetwork($input);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "id": "",  "type": "",  "clock": 0,  "ui": {},  "rulesSource": "",  "description": "",  "permissi' .
                'ons": {    "{id}": {      "r": false,      "m": false,      "d": false,      "a": false,      "o": f' .
                'alse,      "t": ""    }  },  "onlineMemberCount": 0,  "capabilitiesByName": {},  "tagsByName": {},  ' .
                '"circuitTestEvery": 0,  "config": {    "id": "",    "nwid": "",    "name": "",    "objtype": "",    ' .
                '"private": false,    "creationTime": 0,    "revision": 0,    "lastModified": 0,    "multicastLimit":' .
                ' 0,    "routes": [],    "rules": [],    "tags": [],    "capabilities": [],    "totalMemberCount": 0,' .
                '    "activeMemberCount": 0,    "authTokens": [],    "authorizedMemberCount": 0,    "v4AssignMode": {' .
                '},    "v6AssignMode": {}  }}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Delete a network and all its related information permanently. Use extreme caution as this cannot be undone!
     */
    public function testDeleteANetwork11()
    {
        // Parameters for the API call
        $networkId = '0000000000000000';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->deleteANetwork($networkId);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Get all networks for which you have at least read access.
     */
    public function testGetAllViewableNetworks11()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getAllViewableNetworks();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '[  {    "id": "",    "type": "",    "clock": 0,    "ui": {},    "rulesSource": "",    "description":' .
                ' "",    "permissions": {      "{id}": {        "r": false,        "m": false,        "d": false,    ' .
                '    "a": false,        "o": false,        "t": ""      }    },    "onlineMemberCount": 0,    "capabi' .
                'litiesByName": {},    "tagsByName": {},    "circuitTestEvery": 0,    "config": {      "id": "",     ' .
                ' "nwid": "",      "name": "",      "objtype": "",      "private": false,      "creationTime": 0,    ' .
                '  "revision": 0,      "lastModified": 0,      "multicastLimit": 0,      "routes": [],      "rules": ' .
                '[],      "tags": [],      "capabilities": [],      "totalMemberCount": 0,      "activeMemberCount": ' .
                '0,      "authTokens": [],      "authorizedMemberCount": 0,      "v4AssignMode": {},      "v6AssignMo' .
                'de": {}    }  }]',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }
}
