<?php
/*
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ZeroTierCentralAPILib\Tests;

use ZeroTierCentralAPILib\APIException;
use ZeroTierCentralAPILib\Exceptions;
use ZeroTierCentralAPILib\APIHelper;
use ZeroTierCentralAPILib\Models;

class GeneralQueriesControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \ZeroTierCentralAPILib\Controllers\GeneralQueriesController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \ZeroTierCentralAPILib\ZeroTierCentralAPIClient();
        self::$controller = $client->getGeneralQueries();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Obtain information about this server and/or useful to the Central web UI.
     */
    public function testGetStatusAndConfigurationInformation11()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getStatusAndConfigurationInformation();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "online": false,  "clock": 0,  "version": "",  "apiVersion": 0,  "uptime": 0,  "user": {},  "stri' .
                'pePublishableKey": "",  "paidPlans": {},  "smsEnabled": false,  "clusterNode": "",  "loginMethods": ' .
                '{},  "recaptchaSiteKey": "",  "return_to": ""}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Get the currently authenticated user's user record.
     */
    public function testGetCurrentlyAuthenticatedUser11()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getCurrentlyAuthenticatedUser();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "id": "",  "type": "",  "clock": 0,  "globalPermissions": {    "r": false,    "m": false,    "d":' .
                ' false,    "a": false,    "o": false  },  "ui": {},  "displayName": "",  "email": "",  "auth": {},  ' .
                '"smsNumber": "",  "tokens": [],  "permissions": {    "{id}": {      "r": false,      "m": false,    ' .
                '  "d": false,      "a": false,      "o": false,      "t": ""    }  },  "subscriptions": {}}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * This generates a random token suitable for use as an API token server-side using a secure random source. 
It does not actually modify the user record, just returns the token for use by API callers or the UI.
     */
    public function testGenerateARandomToken11()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getGenerateARandomToken();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "token": "",  "clock": 0,  "raw": ""}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Hitting this endpoint causes the user to be logged out. It has no effect when using token authentication, so it's mostly used by the UI.
     */
    public function testTerminateCurrentSession11()
    {

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createTerminateCurrentSession();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }
}
