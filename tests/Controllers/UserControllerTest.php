<?php
/*
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ZeroTierCentralAPILib\Tests;

use ZeroTierCentralAPILib\APIException;
use ZeroTierCentralAPILib\Exceptions;
use ZeroTierCentralAPILib\APIHelper;
use ZeroTierCentralAPILib\Models;

class UserControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \ZeroTierCentralAPILib\Controllers\UserController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \ZeroTierCentralAPILib\ZeroTierCentralAPIClient();
        self::$controller = $client->getUser();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Testcase for testing endpoint Retrieve a User
     */
    public function testRetrieveAUser11()
    {
        // Parameters for the API call
        $userId = '00000000';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->retrieveAUser($userId);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "id": "",  "type": "",  "clock": 0,  "globalPermissions": {    "r": false,    "m": false,    "d":' .
                ' false,    "a": false,    "o": false  },  "ui": {},  "displayName": "",  "email": "",  "auth": {},  ' .
                '"smsNumber": "",  "tokens": [],  "permissions": {    "{id}": {      "r": false,      "m": false,    ' .
                '  "d": false,      "a": false,      "o": false,      "t": ""    }  },  "subscriptions": {}}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Only fields marked as [rw] can be directly modified. If other fields are present in the posted request they are ignored.
     */
    public function testUpdateAUser11()
    {
        // Parameters for the API call
        $userId = '00000000';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->updateAUser($userId);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{  "id": "",  "type": "",  "clock": 0,  "globalPermissions": {    "r": false,    "m": false,    "d":' .
                ' false,    "a": false,    "o": false  },  "ui": {},  "displayName": "",  "email": "",  "auth": {},  ' .
                '"smsNumber": "",  "tokens": [],  "permissions": {    "{id}": {      "r": false,      "m": false,    ' .
                '  "d": false,      "a": false,      "o": false,      "t": ""    }  },  "subscriptions": {}}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Get all users for which you have at least read access.
     */
    public function testGetAllViewableUsers11()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getAllViewableUsers();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '[  {    "id": "",    "type": "",    "clock": 0,    "globalPermissions": {      "r": false,      "m":' .
                ' false,      "d": false,      "a": false,      "o": false    },    "ui": {},    "displayName": "",  ' .
                '  "email": "",    "auth": {},    "smsNumber": "",    "tokens": [],    "permissions": {      "{id}": ' .
                '{        "r": false,        "m": false,        "d": false,        "a": false,        "o": false,    ' .
                '    "t": ""      }    },    "subscriptions": {}  }]',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }
}
